#!/usr/bin/python
# coding: utf-8

class orderModel(object):

    amount = None
    price = None
    total = None

    def __init__(self, order):
        self.price = order[0]
        self.amount = order[1]
        self.total = order[2]

    def __repr__(self):
        return "OrderModel amount: %f, price: %f, total: %f" % (self.amount, self.price, self.total)

    def __str__(self):
        return "OrderModel amount: %f, price: %f, total: %f" % (self.amount, self.price, self.total)

class FoxBitOrderbookModel(object):
    # bids = compra, asks = venda
    bids = []
    asks = []

    def __init__(self, json):
        bids = json.get('bids')
        for bid in bids:
            bid.pop(2)
            bid.append(bid[0] * bid[1])
            self.bids.append(orderModel(bid))

        asks = json.get('asks')
        for ask in asks:
            ask.pop(2)
            ask.append(ask[0] * ask[1])
            self.asks.append(orderModel(ask))

    def getBestBid(self):
        return self.bids[0]

    def getBestAsk(self):
        return self.asks[0]

    def getSpread(self):
        return self.asks[0].price - self.bids[0].price

    def __getPriceFor(self, amount, orders):
        total = 0
        price = 0
        for order in orders:
            total += order.amount
            if(total < amount):
                price += (order.price * order.amount)
            else:
                price += (order.price * (order.amount - (total - amount)))
                break
        return price

    def getBidPriceFor(self, amount):
        return self.__getPriceFor(amount, self.bids)

    def getAskPriceFor(self, amount):
        return self.__getPriceFor(amount, self.asks)

    def getSpreadFor(self, amount):
        return self.getAskPriceFor(amount) - self.getBidPriceFor(amount)

if __name__ == "__main__":
    json = {u'pair': u'BTCBRL', u'bids': [[934.0, 0.4, 90802712], [933.50, 0.7, 90800427], [932.0, 0.4, 90804599], [931.86, 1.0, 90800427], [931.85, 0.11491881, 90800639], [931.81, 1.49364277, 90806451], [931.70, 1.0, 90800427], [931.0, 0.32223416, 90802729], [931.0, 1.0, 90800427], [930.0, 1.0, 90800427], [929.01, 0.3428433, 90803493], [929.0, 0.1, 90804599], [927.35, 0.14539279, 90800639], [927.15, 0.3023033, 90803493], [926.95, 4.0, 90803132], [926.95, 0.54487291, 90801298], [926.94, 1.40342413, 90800436], [926.93, 5.00922399, 90800480], [926.0, 0.43195464, 90802729], [925.29, 0.349928, 90803493], [924.0, 0.1, 90804599], [923.44, 0.3142685, 90803493], [921.59, 0.3203235, 90803493], [919.84, 0.15073273, 90810379], [919.84, 0.00225039, 90810459], [919.75, 0.3066485, 90803493], [919.0, 0.1, 90804599], [915.0, 0.00765027, 90809900], [914.0, 0.1, 90804599], [913.01, 4.0, 90803132], [913.0, 0.40676889, 90802729], [912.6, 0.60741489, 90800401], [912.57, 0.00367095, 90800988], [912.27, 0.0419316, 90808768], [912.25, 0.68073683, 90800428], [912.22, 0.10358246, 90803303], [910.78, 1.705593, 90800698], [910.0, 0.01, 90803537], [910.0, 0.01, 90803537], [910.0, 0.01, 90803537], [910.0, 0.01, 90803537], [909.01, 3.158457, 90803132], [909.0, 0.01, 90803537], [909.0, 5.09821782, 90802618], [909.0, 0.1, 90804599], [908.57, 0.10066368, 90805423], [907.1, 0.1, 90806091], [907.0, 3.01842337, 90807462], [906.1, 0.1, 90806091], [905.1, 0.1, 90806091], [905.01, 0.2562513, 90803119], [905.0, 0.05, 90810752], [905.0, 0.00552486, 90809895], [905.0, 0.24233149, 90809212], [904.1, 0.1, 90806091], [904.0, 0.1, 90804599], [903.1, 0.1, 90806091], [902.1, 0.1, 90806091], [901.1, 0.1, 90806091], [900.7, 0.01010324, 90803119], [900.1, 0.1, 90806091], [900.0, 0.00444444, 90809895], [900.0, 0.01, 90803537], [900.0, 0.01, 90803537], [900.0, 0.00555556, 90809895], [900.0, 0.11111111, 90808838], [900.0, 0.33333333, 90800676], [899.0, 0.01, 90803537], [899.0, 0.01, 90803537], [899.0, 0.1, 90804599], [898.64, 0.05696384, 90800479], [898.0, 0.01, 90803537], [898.0, 0.01, 90803537], [897.0, 0.01, 90803537], [897.0, 0.01, 90803537], [896.0, 0.01, 90803537], [896.0, 0.01, 90803537], [895.5, 0.00558347, 90809900], [895.01, 28.36374789, 90806759], [895.01, 0.05586527, 90800676], [895.0, 0.01, 90803537], [895.0, 0.01, 90803537], [894.0, 0.01, 90803537], [894.0, 0.01, 90803537], [893.0, 0.0755319, 90806792], [893.0, 0.01, 90803537], [893.0, 0.01, 90803537], [892.0, 0.70963004, 90800401], [892.0, 0.01, 90803537], [892.0, 0.01, 90803537], [891.0, 0.01, 90803537], [891.0, 0.01, 90803537], [890.01, 0.0466961, 90804326], [890.0, 0.00337079, 90809900], [890.0, 5.0, 90800427], [890.0, 0.01, 90803537], [890.0, 0.01, 90803537], [889.0, 0.1, 90804599], [885.5, 0.57029927, 90809717], [885.0, 0.002915, 90800763], [882.0, 0.00272109, 90809900], [881.0, 3.40520999, 90809725], [880.0, 0.00481818, 90804059], [879.18, 0.00234308, 90810269], [879.16, 12.63299055, 90800561], [879.0, 0.1, 90804599], [877.1, 0.05700603, 90800676], [877.09, 2.7734782, 90806748], [874.23, 0.00218477, 90805940], [870.0, 1.0, 90806995], [870.0, 0.11494253, 90800515], [869.0, 0.1, 90804599], [868.0, 0.29953917, 90804554], [865.0, 0.30057803, 90804554], [865.0, 0.11560694, 90800515], [863.0, 0.30127462, 90804554], [863.0, 0.00579374, 90809900], [862.5, 0.01073934, 90802521], [862.0, 0.00580046, 90805049], [862.0, 0.00232017, 90810574], [861.13, 0.11612648, 90803097], [861.0, 0.11730546, 90801781], [860.5, 0.47202789, 90803816], [860.1, 0.1, 90804599], [860.0, 0.30232558, 90804554], [860.0, 0.11627907, 90800515], [858.0, 0.05151515, 90810189], [858.0, 0.30303029, 90804554], [855.0, 0.30409356, 90804554], [853.0, 0.30480657, 90804554], [852.3, 0.11732958, 90803097], [851.83, 0.0064788, 90801351], [850.0, 0.01, 90803537], [850.0, 0.30588235, 90804554], [850.0, 0.03237646, 90800750], [850.0, 0.05475294, 90804362], [849.0, 0.25, 90804599], [848.0, 0.30660377, 90804554], [845.0, 0.14016567, 90810237], [841.0, 2.52868014, 90804372], [840.0, 0.00241666, 90810442], [840.0, 0.00238095, 90810656], [839.0, 1.66865316, 90803593], [839.0, 0.219, 90804599], [839.0, 12.24324195, 90806670], [838.75, 0.19191654, 90810237], [832.0, 0.06009615, 90803168], [829.0, 0.25, 90804599], [827.46, 1.81277644, 90800542], [825.0, 0.00606061, 90809900], [819.52, 0.94709098, 90801307], [815.76, 0.04967948, 90803817], [809.0, 0.01011125, 90809808], [808.0, 0.00911111, 90800972], [800.01, 0.03124957, 90805317], [800.0, 2.5, 90802147], [800.0, 11.2453625, 90801292], [791.0, 0.63211125, 90806354], [780.0, 1.28205127, 90806355], [760.0, 0.02631579, 90804020], [750.02, 0.21051438, 90801804], [750.01, 1.03483953, 90804132], [750.0, 18.62408, 90804132], [750.0, 2.5, 90802147], [750.0, 0.26666667, 90806284], [743.12, 0.00271826, 90803878], [740.22, 0.18844398, 90801858], [740.0, 0.01151351, 90803817], [735.0, 0.02793197, 90803817], [730.0, 0.01431507, 90803817], [730.0, 5.53861644, 90801608], [730.0, 1.18806849, 90801781], [729.46, 0.01096702, 90803817], [729.0, 0.55639232, 90804277], [715.01, 1.24054209, 90800423], [710.0, 0.001, 90802217], [704.0, 0.004, 90802217], [703.0, 0.0008, 90802217], [700.01, 0.00285708, 90803422], [700.0, 0.00285714, 90804064], [700.0, 0.099, 90808731], [700.0, 0.28571429, 90806284], [688.0, 0.001, 90802217], [680.08, 0.00298494, 90801903], [680.0, 0.0005, 90802217], [670.0, 0.007, 90802285], [633.53, 0.2106041, 90802269], [632.0, 0.00012658, 90800844], [630.0, 0.06349206, 90800557], [590.0, 0.3559322, 90802488], [500.0, 0.10286, 90810345], [420.42, 3.01902859, 90801754], [420.0, 0.0001, 90800400], [420.0, 0.0001, 90800400], [420.0, 0.0001, 90800400], [420.0, 0.0001, 90800400], [420.0, 0.0001, 90800400], [420.0, 0.0001, 90800400], [420.0, 0.0047619, 90805920], [420.0, 0.0095, 90804066], [420.0, 0.00480952, 90809268], [420.0, 0.0047619, 90810708], [170.0, 1.0, 90800427]], u'asks': [[938.0, 0.01971883, 90810051], [938.85, 0.3190399, 90803493], [938.97, 0.3244303, 90803493], [939.0, 0.0609614, 90800676], [940.58, 0.54371641, 90800436], [940.59, 0.32849872, 90804874], [940.6, 1.80837, 90809663], [940.73, 0.3506313, 90803493], [940.99, 0.5590202, 90800411], [942.0, 1.04926089, 90800434], [942.61, 0.3499167, 90803493], [943.0, 0.5, 90800427], [944.49, 0.3624622, 90803493], [944.99, 0.09876006, 90805520], [945.0, 0.5, 90800427], [946.0, 1.0, 90800427], [946.38, 0.3830551, 90803493], [947.0, 1.0, 90800427], [948.27, 0.2871431, 90803493], [950.0, 3.0, 90800427], [950.0, 0.00706688, 90809300], [950.15, 2.4576611, 90800424], [950.16, 0.62693538, 90800424], [950.17, 0.3416107, 90803493], [950.98, 0.06117084, 90800424], [950.99, 0.3, 90800424], [951.0, 0.1241266, 90800551], [951.97, 0.3, 90800424], [951.98, 0.43865955, 90800424], [951.99, 0.3, 90800424], [952.0, 5.51295585, 90800423], [952.0, 0.3, 90800424], [952.0, 1.0, 90800427], [952.0, 1.0, 90800427], [952.01, 0.05296725, 90801431], [952.06, 0.3, 90800424], [952.07, 0.3559115, 90803493], [953.95, 0.3, 90800424], [953.96, 0.3, 90800424], [953.97, 0.3675684, 90803493], [955.78, 0.3, 90800424], [955.79, 0.3, 90800424], [955.8, 0.3, 90800424], [955.81, 2.99396868, 90803132], [955.81, 0.3, 90800424], [955.82, 5.40463152, 90805232], [955.88, 0.3, 90800424], [955.89, 0.282559, 90803493], [957.78, 0.3, 90800424], [957.79, 0.3, 90800424], [957.8, 0.3, 90800424], [957.81, 0.3472835, 90803493], [959.04, 0.3, 90800424], [959.05, 0.3, 90800424], [959.06, 0.05265541, 90801781], [959.72, 0.3, 90800424], [959.73, 0.3606442, 90803493], [960.0, 2.0, 90800427], [961.65, 0.3, 90800424], [961.66, 0.3452901, 90803493], [963.58, 0.3, 90800424], [963.59, 0.3035213, 90803493], [965.52, 0.3, 90800424], [965.53, 0.3495723, 90803493], [967.46, 0.3, 90800424], [972.68, 0.3, 90800424], [972.69, 0.3, 90800424], [972.7, 0.00206395, 90809390], [972.99, 0.72563406, 90800423], [976.28, 0.3, 90800424], [976.29, 0.68690348, 90800424], [976.3, 0.0427587, 90802114], [976.48, 1.70162023, 90800424], [976.49, 0.10307202, 90801153], [976.5, 5.25958621, 90805232], [976.5, 0.00090374, 90804066], [978.29, 0.10315303, 90801153], [980.0, 0.10314875, 90801153], [980.01, 0.00146412, 90806821], [986.98, 0.10234165, 90801153], [990.0, 0.05347423, 90809463], [990.0, 0.14786668, 90802758], [990.0, 0.05532139, 90809487], [998.0, 1.19746462, 90802188], [998.44, 0.00201838, 90809143], [999.11, 0.00532578, 90800601], [1000.0, 0.00520833, 90800398], [1000.0, 0.00022859, 90804153], [1000.0, 2.03363914, 90807037], [1000.0, 0.003, 90809390], [1000.0, 0.00309225, 90806566], [1000.0, 3.0, 90801524], [1004.94, 0.55691176, 90800400], [1004.95, 0.00201503, 90807795], [1005.4, 0.02385395, 90808298], [1006.4, 0.01441773, 90802323], [1006.84, 0.00098894, 90800829], [1011.77, 0.00203204, 90809067], [1011.97, 0.04369099, 90804012], [1012.54, 0.01993008, 90802323], [1013.75, 0.02005523, 90802323], [1014.99, 0.19804063, 90801153], [1015.0, 0.00198827, 90809193], [1015.99, 0.19788527, 90801153], [1017.0, 0.98750001, 90801353], [1017.18, 0.00594503, 90804069], [1018.0, 1.0, 90801353], [1019.0, 1.0, 90801353], [1019.98, 1.0, 90801353], [1020.0, 0.00195883, 90808104], [1020.0, 0.00496267, 90800398], [1020.0, 2.99751031, 90807037], [1020.0, 0.0104212, 90800398], [1020.0, 0.053865, 90806839], [1021.0, 1.0, 90801353], [1027.0, 0.07812155, 90808090], [1030.53, 0.02, 90808271], [1031.0, 0.01986854, 90800538], [1031.0, 0.04399678, 90800538], [1035.0, 0.02399295, 90805817], [1037.0, 0.01184187, 90808298], [1037.0, 0.00809665, 90809535], [1050.0, 0.00217436, 90805639], [1060.0, 0.00378817, 90807949], [1060.0, 1.17273246, 90800982], [1067.0, 0.1038979, 90809214], [1100.0, 2.42418386, 90801772], [1100.0, 0.00218902, 90805937], [1100.0, 5.9875, 90802147], [1140.0, 0.005, 90800464], [1150.0, 0.00531914, 90800460], [1150.0, 0.1, 90807462], [1200.0, 0.2, 90807462], [1200.0, 0.66389969, 90808731], [1300.0, 0.2, 90807462], [1364.0, 0.06171, 90810066], [1499.99, 2.85580926, 90802147], [1499.99, 0.5, 90801307], [1500.0, 0.00793534, 90802162], [1500.0, 0.1, 90807462], [1500.0, 0.0005, 90809514], [1600.0, 0.001, 90801029], [1600.0, 0.10482858, 90801862], [1600.0, 1.68709905, 90803490], [1700.0, 0.1, 90807462], [1900.0, 0.1, 90807462], [2000.0, 0.2, 90807462], [2999.99, 0.01007459, 90804182], [3000.0, 3.868e-05, 90801935], [3000.0, 0.00019998, 90809467], [3000.0, 20.52096763, 90800749]]}
    orderb = FoxBitOrderbookModel(json)
    print 'Best bid: %s' % orderb.getBestBid()
    print 'Best ask: %s' % orderb.getBestAsk()
    print 'Spread: %s' % orderb.getSpread()
    print 'Bid price for 1 BTC: %f' % orderb.getBidPriceFor(1)
    print 'Ask price for 1 BTC: %f' % orderb.getAskPriceFor(1)
    print 'Spread for 1 BTC: %f' % orderb.getSpreadFor(1)
